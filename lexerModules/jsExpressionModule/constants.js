export const tokens = [
        { type: 'group', symbols: ['(', ')'], direction: 'LTR', precedence: 1 },
        { type: 'memberAccess', symbols: ['.'], direction: 'LTR', precedence: 2 },
        { type: 'computedMemberAccess', symbols: ['[', ']'], direction: 'LTR', precedence: 2 },
        { type: 'optionalChaining', symbols: ['?.'], direction: 'LTR', precedence: 2 },
        { type: 'increment', symbols: ['++'], direction: 'RTL', precedence: 3 },
        { type: 'decrement', symbols: ['--'], direction: 'RTL', precedence: 3 },
        { type: 'not', symbols: ['!'], direction: 'RTL', precedence: 4 },
        { type: 'unary', symbols: ['+', '-'], direction: 'RTL', precedence: 4 },
        { type: 'delete', symbols: ['delete'], direction: 'RTL', precedence: 4 },
        { type: 'typeof', symbols: ['typeof'], direction: 'RTL', precedence: 4 },
        { type: 'exponential', symbols: ['**'], direction: 'RTL', precedence: 5 },
        { type: 'multiplication', symbols: ['*'], direction: 'LTR', precedence: 6 },
        { type: 'division', symbols: ['/'], direction: 'LTR', precedence: 6 },
        { type: 'remainder', symbols: ['%'], direction: 'LTR', precedence: 6 },
        { type: 'addition', symbols: ['+'], direction: 'LTR', precedence: 7 },
        { type: 'subtraction', symbols: ['-'], direction: 'LTR', precedence: 7 },
        { type: 'lessEquals', symbols: ['<='], direction: 'LTR', precedence: 8 },
        { type: 'less', symbols: ['<'], direction: 'LTR', precedence: 8 },
        { type: 'moreEquals', symbols: ['>='], direction: 'LTR', precedence: 8 },
        { type: 'more', symbols: ['>'], direction: 'LTR', precedence: 8 },
        { type: 'instanceof', symbols: ['instanceof'], direction: 'LTR', precedence: 8 },
        { type: 'in', symbols: ['in'], direction: 'LTR', precedence: 8 },
        { type: 'equals', symbols: ['=='], direction: 'LTR', precedence: 9 },
        { type: 'typeEquals', symbols: ['==='], direction: 'LTR', precedence: 9 },
        { type: 'notEquals', symbols: ['!='], direction: 'LTR', precedence: 9 },
        { type: 'notTypeEquals', symbols: ['!=='], direction: 'LTR', precedence: 9 },
        { type: 'and', symbols: ['&&'], direction: 'LTR', precedence: 10 },
        { type: 'or', symbols: ['||'], direction: 'LTR', precedence: 11 },
        { type: 'xor', symbols: ['^'], direction: 'LTR', precedence: 11 },
        { type: 'coalescing', symbols: ['??'], direction: 'LTR', precedence: 12 },
        { type: 'ternary', symbols: ['?'], direction: 'RTL', precedence: 13 },
        { type: 'colon', symbols: [':'], direction: 'LTR', precedence: 13 },
        { type: 'plusAssign', symbols: ['+='], direction: 'RTL', precedence: 14 },
        { type: 'minusAssign', symbols: ['-='], direction: 'RTL', precedence: 14 },
        { type: 'timesAssign', symbols: ['*='], direction: 'RTL', precedence: 14 },
        { type: 'divideAssign', symbols: ['/='], direction: 'RTL', precedence: 14 },
        { type: 'assign', symbols: ['='], direction: 'RTL', precedence: 14 },
        { type: 'of', symbols: ['of'], direction: 'LTR', precedence: 15 },
        { type: 'true', symbols: ['true'], direction: null, precedence: 16 },
        { type: 'false', symbols: ['false'], direction: null, precedence: 16 },
        { type: 'null', symbols: ['null'], direction: null, precedence: 16 },
        { type: 'let', symbols: ['let'], direction: null, precedence: 16 },
        { type: 'const', symbols: ['const'], direction: null, precedence: 16 },
        { type: 'semicolon', symbols: [';'], direction: null, precedence: 16 },
        { type: 'quotes', symbols: ["'"], direction: null, precedence: 16 },
        { type: 'doubleQuotes', symbols: ['"'], direction: null, precedence: 16 }
    ];
    